@inherits LayoutComponentBase;
@using Blazored.Toast.Configuration
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<AuthorizeView>
    <Authorized>
        <nav class="navbar is-fixed-bottom" role="navigation" aria-label="main navigation">
            <div class="navbar-brand">
                <a class="navbar-item brand-text" href="">
                    OBONATOR
                </a>
                <div class="navbar-burger @NavMenuCssClass" aria-label="menu" aria-expanded="false" @onclick="ToggleNavMenu">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
        </nav>
        <div class="main">
            <BlazoredToasts Position="ToastPosition.TopRight"
                            Timeout="1"
                            IconType="IconType.FontAwesome"
                            SuccessClass="success-toast-override"
                            SuccessIcon="fa fa-thumbs-up"
                            ErrorIcon="fa fa-bug" />
            <aside class="obon-menu is-side has-navbar-fixed-bottom @NavMenuCssClass">
                <NavMenu />
            </aside>
            @if (Installable)
            {
                <div class="fixed-bottom w-100 alert alert-dark d-flex align-items-center" @onclick="InstallClicked">
                    <h3>Install this app?</h3>
                    <small class="ml-auto mr-1 rounded-pill"><button @onclick="@(()=>Installable=false)">X</button></small>
                </div>
            }
            <div class="obon-section has-navbar-fixed-bottom">
                @Body
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="main">
            <div class="obon-section">
                @Body
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>
@code
{
    [Inject] IJSRuntime JSRuntime { get; set; }
    static bool Installable = false;
    static Action ml;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ml = () => InvokeAsync(StateHasChanged);
            collapseNavMenu = await localStorage.GetItemAsync<bool>("collapseNavMenu");
        }
        catch
        {
            //error server side
        }

    }

    [JSInvokable("InstallPwaPrompt")]
    //a named method so that it is easy to call from JS Interop
    // with the following config
    // <ServiceWorkerRegisterInstallableType>installable-blazor</ServiceWorkerRegisterInstallableType>
    // <ServiceWorkerBlazorAssembly>TestPwa.Client</ServiceWorkerBlazorAssembly>
    // <ServiceWorkerBlazorInstallMethod>InstallPwaPrompt</ServiceWorkerBlazorInstallMethod>
    public static Task InstallPwaPrompt()
    {
        Installable = true;
        ml.Invoke();
        return Task.CompletedTask;
    }
    async void InstallClicked(MouseEventArgs args)
    {
        Installable = false;
        await JSRuntime.InvokeAsync<object>("BlazorPWA.installPWA");//this name comes from the nuget package that generates the pwa code, don't change it unless you change the generated code
    }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "is-active" : null;

    private async Task ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
        await localStorage.SetItemAsync<bool>("collapseNavMenu", collapseNavMenu);
    }
}
