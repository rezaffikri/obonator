@page "/cryptography"

@attribute [Authorize(Roles = "guest, admin")]
<nav class="breadcrumb is-small" aria-label="breadcrumbs">
    <ul>
        <li>
            <a href="#">
                Obonator
            </a>
        </li>
        <li class="is-active">
            <a href="#" aria-current="page">Cryptography</a>
        </li>
    </ul>
</nav>
<div class="box">
    <div class="box-header">
        <h1 class="subtitle has-text-centered">
            Cryptography
        </h1>
    </div>
    <div class="box-body">
        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Type</label>
            </div>
            <div class="field-body">
                <div class="field">
                    <div class="control">
                        <div class="select">
                            <select @bind="ddlSelected">
                                <option value="1">TripleDes</option>
                                <option value="2">AES</option>
                                <option value="3">MD5</option>
                                <option value="4">Secret TripleDes</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @if (ddlSelected == 1 || ddlSelected == 2)
        {
            <div class="field is-horizontal">
                <div class="field-label is-normal">
                    <label class="label">Secret Key</label>
                </div>
                <div class="field-body">
                    <div class="field">
                        <div class="control">
                            <input type="text" class="input" @bind="keyData" placeholder="Enter Secret Key" />
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="field is-horizontal">
            <div class="field-label is-normal"><label class="label">Input</label></div>
            <div class="field-body">
                <div class="field">
                    <div class="control">
                        <input type="text" class="input" @bind="inputData" placeholder="Enter text to be Encrypted or Decrypted" />
                    </div>
                </div>
            </div>
        </div>
        <div class="field is-horizontal">
            <div class="field-label is-normal">
                <label class="label">Output</label>
            </div>
            <div class="field-body">
                <div class="field has-addons">
                    <div class="control is-expanded">
                        <input type="text" class="input" @bind="outputData" placeholder="Result goes here" />
                    </div>
                    <div class="control">
                        <ButtonCopyToClipboard CopyText="@outputData" />
                    </div>
                </div>
            </div>
        </div>
        @if (ddlSelected == 1)
        {
            <div class="field is-horizontal">
                <div class="field-label is-normal"><label class="label">Output Format</label></div>
                <div class="field-body">
                    <div class="field">
                        <div class="control">
                            <label>
                                <input name="plain" type="radio"
                                       checked="@(rdTypeValue == 1)"
                                       @onchange="@(() => { rdTypeValue = 1; })" />
                                Plain
                            </label>
                            <label>
                                <input name="plain" type="radio"
                                       checked="@(rdTypeValue == 2)"
                                       @onchange="@(() => { rdTypeValue = 2; })" />
                                Hex
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="field is-horizontal">
            <div class="field-label is-normal"><!----></div>
            <div class="field-body">
                <div class="field">
                    <div class="field is-grouped">
                        <div class="control">
                            <button class="button is-primary" @onclick="BtnEncrypt">
                                Encrypt
                            </button>
                        </div>
                        @if (ddlSelected != 3)
                        {
                            <div class="control">
                                <button class="button is-primary" @onclick="BtnDecrypt">
                                    Decrypt
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code{
    private string keyData { get; set; }
    private string inputData { get; set; }
    private string outputData { get; set; }
    private int ddlSelected = 1;
    protected int rdTypeValue { get; set; } = 1;
    private bool isHex { get; set; }

    void CheckIsHex(int value)
    {
        if (value == 1)
        {

            isHex = false;
        }
        else
        {
            isHex = true;
        }
    }

    protected void DdlClicked(ChangeEventArgs args)
    {
        ddlSelected = int.Parse(args.Value.ToString());
    }

    public void BtnEncrypt()
    {
        CheckIsHex(rdTypeValue);
        switch (ddlSelected)
        {
            case 1:
                outputData = ObonCryptography.TripleDes.Encrypt(keyData, inputData, isHex);
                break;
            case 2:
                outputData = ObonCryptography.AES.Encrypt(keyData, inputData);
                break;
            case 3:
                outputData = ObonCryptography.MD5Hash.Hash(inputData);
                break;
            case 4:
                outputData = ObonCryptography.TripleDes.EncryptOct(inputData);
                break;
        }

        if (string.IsNullOrEmpty(outputData))
        {
            _Toast.ShowError("Key atau input salah");
        }
    }

    public void BtnDecrypt()
    {
        CheckIsHex(rdTypeValue);
        switch (ddlSelected)
        {
            case 1:
                outputData = ObonCryptography.TripleDes.Decrypt(keyData, inputData, isHex);
                break;
            case 2:
                outputData = ObonCryptography.AES.Decrypt(keyData, inputData);
                break;
            case 3:
                outputData = ObonCryptography.MD5Hash.Hash(inputData);
                break;
            case 4:
                outputData = ObonCryptography.TripleDes.DecryptOct(inputData);
                break;
        }
        if (string.IsNullOrEmpty(outputData))
        {
            _Toast.ShowError("Key atau input salah");
        }
    }
}
